This is the canonical reference point for *all* projects, past, present and future.

If the project is big enough that it has its own /notes/ files, this should just be a link to that file.

* System Administration & Utilities
** TODO name-value-args
** TODO proper locationing of configs & cmake install for utilities
This does hinge to a certain extent on the potential for different platforms to share a single master copy of a config, and differ by branching. If symlinks are to be broken, and utilities on PATH are to be moved, this should all happen at once.

With that said, there is also a chance git branches won't work perfectly for this, as they /seem/ to be slightly more specialised for maintaining a code base. For this reason, the git branching thing should be the first thing investigated here.

*** DONE Transition some configs to a branching system to test if suitable
This has been working great, currently leaving the master branch as the desktop config, and having separate branches for everything else.

*** TODO Copy cmake stuff from Bedrock in order to install utilities
    
** TODO migration to Gentoo
*** TODO install hantek software
- pulseview
- driver is mentioned somewhere in Pocket
*** TODO notify-send
*** DONE can CUDA be installed if we allow EULA?
No, it is maked for other reasons
*** TODO install comma & snark
*** TODO Wacom support
** TODO transition to hq repo
*** TODO copy master configs from useful-scripts, ensure they are generic
*** TODO create named branches (per new hostnames) with their specific code
diff the useful-scripts verison
*** TODO add a deprecation notice to useful-scripts

*** TODO add a list of installed packages 

*** TODO add a list of tracked git repos
*** TODO use cmake to install scripts (and configs if possible)



* Non-technical
** Resume
Write in ORG mode, translate to LaTeX and HTML


* Programming Languages
** Rust
*** DONE Rust by example
*** DONE csv-plot
*** TODO redox (Rust OS)
Try to boot from a USB. It should handle a PS/2 keyboard (yay!). This is not likely to replace Linux (just yet), but there is lots to work on. Would be a good project to learn about OSes and Rust.
*** TODO Contribute to i3status-rust 
**** DONE Determine if the project is too advanced
For now, this may be true. Maybe cover the kernel and pwnable first?
*** TODO Contribute to ROSrust


** Assembler
*** TODO x86 Assembler tutorial (YouTube)


** C++
*** TODO work on match-images functionality
First in Python, then translate to c++


* Operating systems
** Linux
*** DONE Linux From Scratch
LFS was a good learning experience, but would take a lot of effort to maintain as a system. Gentoo automates almost all of the boring stuff
*** TODO Take an operating systems course
*** TODO Understanding the Linux Kernel
Do this after LFS, it might make understanding some of its content easier
*** TODO Read through kernel docs
Do this after /Understanding the Linux Kernel/, as it should lay the foundations for
making sense of the more contemporary documentation

** Gentoo
*** TODO make ebuild for cloudcompare

** Redox
*** TODO try booting from USB
*** TODO determine which aspects can be worked on


* Building Stuff
** TODO [[~/src/projects/pelicomputer/plan.org][Pelicomp v1.0]]
** FreeCAD
*** TODO Tutorial
*** TODO Metrology


* Algorithms
** TODO MIT algorithms course


* Software Design
  

* Security
** TODO pwnable.kr

   
* Embedded
** Contemporary
*** RTEMS Quick Start Guide
**** TODO Review email from Chris to determine if can proceed
** Ben Eater Tutorials
*** TODO Hello World on a 6502
Order both this kit and the homemade clock kit too. It would be cool to have an
oscilloscope by then, but not fully necessary.
*** TODO 8-bit computer
Order components
** Pomodoro
- Build a simple pomodoro timer from scratch using either
  - a microprocessor (e.g. 6502), using assembly
  - from scratch like the 8-bit computer.
- Probably need to watch a few more videos before doing this


* Other people's projects
** Tour Calculator


* Completed
** C
*** DONE Work through CK&R


* Abandoned
None, yet.
