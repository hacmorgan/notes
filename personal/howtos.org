A collection of random how-to's, to avoid having to re-find stuff on google.

* ffmpeg
** extract frames from video
This snippet will extract every frame of the video, to files with 4-digit names. There are ways to take only some of the images, and ways to increase performance in that situation too, on [[https://stackoverflow.com/questions/10957412/fastest-way-to-extract-frames-using-ffmpeg][Stack Overflow]].
#+begin_src bash
ffmpeg -i <video_name> %04d.png
#+end_src
** trim video
*** using start and end time
#+begin_src bash
ffmpeg -i input.mp4 -ss 01:19:27 -to 02:18:51 -c:v copy -c:a copy output.mp4
#+end_src
*** using duration
#+begin_src bash
ffmpeg -i input.mp4 -ss 01:19:27 -t 00:01:05 -c:v copy -c:a copy output.mp4
#+end_src
* jq 
** adding an offset to all the annotations in a SeqView annotations.json
The below code snippet adds 5 to the /begin/ and /end/ fields of every annotation in the /valid/ category
#+begin_src bash
cat annotations.cvi.json | jq ".valid[].begin += 5 | .valid[].end += 5"
#+end_src
* emacs
** view and set offset (indentation level) at a point in code
Running the command below (or =C-c C-o=) will show you the name of the piece of syntax you're looking at, as well as its indentation level. Indentation level can take =--=, =-=, =0=, =+=, =++=
#+begin_src emacs-lisp
M-x c-set-offset <ret>
#+end_src

You can also set this in the confog file like so (just a random example):
 #+begin_src emacs-lisp
(c-set-offset 'substatement-open 0)
 #+end_src
* find ips and hostnames on network
/courtesy of Tek/
** Find IPs on LAN:
Here we will use =nmap= to scan the network for IPs. The manual shows the many possible ways of specifying address ranges, using different protocols, etc.

In this example, we will use ping packets on the abyss network, like so:
#+begin_src bash 
nmap -sn 10.137.5.240/24
#+end_src

This will give us more output than we need, including latency, so we will extract only the IPs like so
#+begin_src bash
nmap -sn 10.137.5.240/24 | grep "scan " | cut -d" " -f5
#+end_src

** Find hostnames corresponding to IPs
Now that we have a list of IPs (lets say we redirected the output of the above command to /ips.txt/), we can use =avahi-resolve-address= to extract the corresponding hostnames.
#+begin_src bash
cat ips | while read s; do avahi-resolve-address $s; done
#+end_src
* comma & snark
** installing on Arch Linux
*** pthreads issues
1. You need to install [[https://aur.archlinux.org/packages/libpthread-stubs/][libpthread-stubs]] from the aur.
2. You need to run =sudo ldconfig=
3. If the comma build dir is already populated, delete everything
4. cmake and make

*** PYTHONPATH
The default location that python looks for external python packages can be found by running:
 #+begin_src python
import sys
print( sys.path )
 #+end_src

By default, *comma* puts its python stuff at //usr/local/lib/python3.9/site-packages/. 
On Arch Linux, this directory does not show up when you print sys.path, 
so we need to add it to $PYTHONPATH, or else change where comma puts its stuff *(which is easier)*. 

**** Set =$PYTHONPATH=
In every shell where csv-eval will be used, make sure to include the following
in the config file:
#+begin_src bash
export PYTHONPATH='/usr/local/lib/python3.9/site-packages'
#+end_src

*** manually installing boost 1.71.0
As of <2021-02-21 Sun>, Arch comes with Boost 1.75.0, which comma is not currently working with snark (it does work with comma though).
To install boost 1.71.0:
1. Download it from [[https://www.boost.org/users/history/version_1_71_0.html][the boost website]].
2. Unpack it somewhere in the filesystem (e.g. /~/src/lib/boost_1_71_0//)
3. Change into that directory
4. Run =./bootstrap.sh=
5. That should tell you to run =./b2=, which you should do
6. Finally, run =./b2 install=. 

It will be installed to //usr/local,/ but =ld= doesn't know to look there, so run:
#+begin_src bash
sudo echo '/usr/local/lib/' > /etc/ld.so.conf.d/comma.conf
#+end_src
and then run =sudo ldconfig= to get everything up to speed.

*** install the following programs (for both comma and snark), many are not documented in install.yml
cmake
socat
zeromq
gtest
procps-ng
recode
boost
boost-libs
eigen
fftw
tbb
zlib
bzip2
opencv
libpcap
qt5-3d
qt5-base
qt5-charts
assimp
vtk
lvtk
glew
hdf5
