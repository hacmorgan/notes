A collection of random how-to's, to avoid having to re-find stuff on google.

* ffmpeg
** extract frames from video
This snippet will extract every frame of the video, to files with 4-digit names. There are ways to take only some of the images, and ways to increase performance in that situation too, on [[https://stackoverflow.com/questions/10957412/fastest-way-to-extract-frames-using-ffmpeg][Stack Overflow]].
#+begin_src bash
ffmpeg -i <video_name> %04d.png
#+end_src
** trim video
*** using start and end time
#+begin_src bash
ffmpeg -i input.mp4 -ss 01:19:27 -to 02:18:51 -c:v copy -c:a copy output.mp4
#+end_src
*** using duration
#+begin_src bash
ffmpeg -i input.mp4 -ss 01:19:27 -t 00:01:05 -c:v copy -c:a copy output.mp4
#+end_src
* jq 
** adding an offset to all the annotations in a SeqView annotations.json
The below code snippet adds 5 to the /begin/ and /end/ fields of every annotation in the /valid/ category
#+begin_src bash
cat annotations.cvi.json | jq ".valid[].begin += 5 | .valid[].end += 5"
#+end_src
* emacs
** view and set offset (indentation level) at a point in code
Running the command below (or =C-c C-o=) will show you the name of the piece of syntax you're looking at, as well as its indentation level. Indentation level can take =--=, =-=, =0=, =+=, =++=
#+begin_src emacs-lisp
M-x c-set-offset <ret>
#+end_src

You can also set this in the confog file like so (just a random example):
 #+begin_src emacs-lisp
(c-set-offset 'substatement-open 0)
 #+end_src
** elisp (up to *9 How Lists are Implemented*)
*** *example*: print elements of a list
#+begin_src emacs-lisp
(setq animals '(gazelle giraffe lion tiger))

(defun print-elements-of-list (list)
  "Print each element of LIST on a line of its own"
  (while list
    (print (car list))
    (setq list (cdr list))))
(print-elements-of-list animals)
#+end_src

To see this in action, paste the code in emacs' scratch buffer, move the cursor below the code (*that's important*) and run =M-x eval-print-last-sexp= (or C-j)
*** *example*: delete text up to occurence of string
This is similar to (though a cut-down verion of) the zap-to-char function, which is shown in the elisp tutorial. 

This first verison kills up to (and including) the next occurence of the string
#+begin_src emacs-lisp
;; abcdefghijklmnopqrstuvwxyz
(kill-region (point)
             (progn (search-forward "cde" nil nil -2)
                    (point)))
;; abcdefghijklmnopqrstuvwxyz
#+end_src

This first verison kills up to (and including) the previous occurence of the string, dictated by the final argument to search-forward. -2 is required, because otherwise it will delete the fucntion definition
#+begin_src emacs-lisp
;; abcdefghijklmnopqrstuvwxyz
(kill-region (point)
             (progn (search-forward "cde" nil nil -2)
                    (point)))
;; abcdefghijklmnopqrstuvwxyz
#+end_src
*** *example*: interactive functions
To see all of the prefix characters, try =C-h C-h f interactive=

The interactive statement dictates that the given argument is of type string (followed by the prompt)
#+begin_src emacs-lisp
(defun test-search (string)
  "Move point after next occurence of given string"
  (interactive "sJump to string: ")
  (search-forward string))
#+end_src

This one dictates that the user should be prompted for two numbers one after another (the \n separated arguments)
#+begin_src emacs-lisp
(defun add (first second)
  "Add two numbers"
  (interactive "nFirst: \nnSecond: ")
  (message "Sum: %d" (+ first second)))
#+end_src
*** *example*: print 3rd element of kill-ring (if it exists)
Note: this function is not interactive (i.e cannot be run using M-x third-killed), and thus the DECL part of the function definition is not given
#+begin_src emacs-lisp
(defun third-killed ()
  "Print the 3rd element of the kill-ring, print message if fewer than 3 elements"
  (let ((elem (car (nthcdr 3 kill-ring))))
    (if elem
        (message "Third element of kill-ring: %s" elem)
      (message "kill-ring has fewer than 3 elements"))))
#+end_src

*** basic types
**** get integer representation of character (in this case, Q)
#+begin_src emacs-lisp
?Q
#+end_s#<buffer howtos.org>rc
* find ips and hostnames on network
/courtesy of Tek/
** Find IPs on LAN:
Here we will use =nmap= to scan the network for IPs. The manual shows the many possible ways of specifying address ranges, using different protocols, etc.

In this example, we will use ping packets on the abyss network, like so:
#+begin_src bash 
nmap -sn 10.137.5.240/24
#+end_src

This will give us more output than we need, including latency, so we will extract only the IPs like so
#+begin_src bash
nmap -sn 10.137.5.240/24 | grep "scan " | cut -d" " -f5
#+end_src

** Find hostnames corresponding to IPs
Now that we have a list of IPs (lets say we redirected the output of the above command to /ips.txt/), we can use =avahi-resolve-address= to extract the corresponding hostnames.
#+begin_src bash
cat ips | while read s; do avahi-resolve-address $s; done
#+end_src
* GDB
** The basics
*** Compile program with support for GDB
add =-g= to compile command
*** Basic Commands
- run =gdb <executable>=
- =break main= will set a breakpoint at main function. The same can be done for other functions, or lines, e.g. =break main.cpp:14=
- =run= will run the program
- =next= will step to the next line
- =backtrace= will show the call stack (I think), useful for debugging segfaults etc

* comma & snark
** installing on Arch Linux
*** pthreads issues
1. You need to install [[https://aur.archlinux.org/packages/libpthread-stubs/][libpthread-stubs]] from the aur.
2. You need to run =sudo ldconfig=
3. If the comma build dir is already populated, delete everything
4. cmake and make

*** PYTHONPATH
The default location that python looks for external python packages can be found by running:
 #+begin_src python
import sys
print( sys.path )
 #+end_src

By default, *comma* puts its python stuff at //usr/local/lib/python3.9/site-packages/. 
On Arch Linux, this directory does not show up when you print sys.path, 
so we need to add it to $PYTHONPATH, or else change where comma puts its stuff *(which is easier)*. 

**** Set =$PYTHONPATH=
In every shell where csv-eval will be used, make sure to include the following
in the config file:
#+begin_src bash
export PYTHONPATH='/usr/local/lib/python3.9/site-packages'
#+end_src

*** manually installing boost 1.71.0
As of <2021-02-21 Sun>, Arch comes with Boost 1.75.0, which comma is not currently working with snark (it does work with comma though).
To install boost 1.71.0:
1. Download it from [[https://www.boost.org/users/history/version_1_71_0.html][the boost website]].
2. Unpack it somewhere in the filesystem (e.g. /~/src/lib/boost_1_71_0//)
3. Change into that directory
4. Run =./bootstrap.sh=
5. That should tell you to run =./b2=, which you should do
6. Finally, run =./b2 install=. 

It will be installed to //usr/local,/ but =ld= doesn't know to look there, so run:
#+begin_src bash
sudo echo '/usr/local/lib/' > /etc/ld.so.conf.d/comma.conf
#+end_src
and then run =sudo ldconfig= to get everything up to speed.

*** install the following programs (for both comma and snark), many are not documented in install.yml
cmake
socat
zeromq
gtest
procps-ng
recode
boost
boost-libs
eigen
fftw
tbb
zlib
bzip2
opencv
libpcap
qt5-3d
qt5-base
qt5-charts
assimp
vtk
lvtk
glew
hdf5

*** building libicu from source
- Download a source distribution of libicu (68 as of the time of writing this)
- Navigate into the directory
#+begin_src bash
./configure
make
sudo make install
#+end_src

* zfs
** on Ubuntu (20.04)
*** Installing zfs
#+begin_src bash
sudo apt install zfsutils-linux
#+end_src
*** Creating a (non-mirrored) pool
#+begin_src bash
sudo zpool create -m /mnt/storage storage /dev/sdb1
#+end_src
*** Import the desired pool
By default, pools are unavailable until imported
#+begin_src bash
sudo zpool import # lists all pools
sudo zpool import storage
#+end_src
*** Attach a new drive to mirror the first drive in the pool
In this example, sdb1 is the original drive, and we are adding sda1
#+begin_src bash
sudo zpool attach storage /dev/sdb1 /dev/sda1
#+end_src
